"""Mixture model using EM"""
from typing import Tuple
import numpy as np
from common import GaussianMixture



def estep(X: np.ndarray, mixture: GaussianMixture) -> Tuple[np.ndarray, float]:
    """E-step: Softly assigns each datapoint to a gaussian component

    Args:
        X: (n, d) array holding the data
        mixture: the current gaussian mixture

    Returns:
        np.ndarray: (n, K) array holding the soft counts
            for all components for all examples
        float: log-likelihood of the assignment
    """
    mu = mixture.mu
    var = mixture.var
    p = mixture.p
    n, d = X.shape
    K, _ = mixture.mu.shape

    likelihood = np.zeros((n, K))

    for i in range(n):
        for j in range(K):
            # Multivariate Gaussian, N(x; mu, var)
            sigma = var[j] * np.identity(d)
            numerator = (-1 / 2) * ((X[i] - mu[j]).T.dot(np.linalg.inv(sigma))).dot((X[i] - mu[j]))
            denominator = (((2 * np.pi) ** (d / 2)) * (np.linalg.det(sigma) ** (1 / 2)))
            gaussian = np.exp(numerator) / denominator

            # P(x generated by j | theta) = mixing proportion * N(x; mu, var)
            likelihood[i, j] = p[j] * gaussian

    # posterior probability, P(j|i)
    post = likelihood / likelihood.sum(axis=1, keepdims=True)

    # log-likelihood
    LL = np.log(likelihood.sum(axis=1)).sum()

    return post, LL


def mstep(X: np.ndarray, post: np.ndarray) -> GaussianMixture:
    """M-step: Updates the gaussian mixture by maximizing the log-likelihood
    of the weighted dataset

    Args:
        X: (n, d) array holding the data
        post: (n, K) array holding the soft counts
            for all components for all examples

    Returns:
        GaussianMixture: the new gaussian mixture
    """
    _, d = X.shape
    n, K = post.shape

    mu = np.zeros((K,d))
    var = np.zeros(K)
    p = np.zeros(K)

    for j in range(K):
        # find mixture model given the derivative of the fixed likelihood function
        mu[j] = np.sum(post[:,j].reshape(n,1) * X, axis=0) / np.sum(post[:,j])
        var[j] = np.sum(post[:,j].reshape(n,1) * np.square(X - mu[j])) / (d * np.sum(post[:,j]))
        p[j] = (1 / n) * np.sum(post[:,j])

    return GaussianMixture(mu, var, p)


def run(X: np.ndarray, mixture: GaussianMixture,
        post: np.ndarray) -> Tuple[GaussianMixture, np.ndarray, float]:
    """Runs the mixture model

    Args:
        X: (n, d) array holding the data
        post: (n, K) array holding the soft counts
            for all components for all examples

    Returns:
        GaussianMixture: the new gaussian mixture
        np.ndarray: (n, K) array holding the soft counts
            for all components for all examples
        float: log-likelihood of the current assignment
    """

    LL_old = None
    LL_new = None

    while (LL_old is None or (LL_new - LL_old) >= (np.abs(LL_new) * 1e-6)):
        LL_old = LL_new
        post, LL_new = estep(X, mixture)
        mixture = mstep(X, post)


    return mixture, post, LL_new